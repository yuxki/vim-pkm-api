*pkm.txt*  For Vim version 8.2   Last change: 2021/12/29

Customable Key Oriented Popup Menu.

Version: 0.1.0
Author: yuxki
License: MIT License
Repository: https://github.com/yuxki/vim-pkm-api

==============================================================================
CONTENTS 						*pkm-contents*

1. Introduction		|pkm-intro|
2. Usage		|pkm-usage|
3. Install		|pkm-install|
4. Interface		|pkm-interface|
   API Contents		|pkm-api-contents|
   Constructor 		|pkm-constructor|
   Methods 		|pkm-methods|
   Handlers		|pkm-handlers|
   Props		|pkm-props|
   Utils 		|pkm-utils|
5. Samples		|pkm-samples|

==============================================================================
1. Introduction						*pkm-intro*

The pkm (Popup Key Menu) is customable and the alphabet and number keys
oriented popup menu. See |popup.txt| for details on popup.

==============================================================================
2. Usage						*pkm-usage*

 +------------------------+
 | [r] red    [b] blue    |
 | [y] yellow [o] orange  |
 +------------------------+

This sample program open the above popup menu that prints color name
according to the the key. The key 'x' closes the popup. Set 0 to the
|pkm.xclose| to disable this util.

Note: See |pkm-samples| to get more "plugin like" samples.
>
 let s:colors = ['red', 'blue', 'yellow', 'orange']
 let s:options = #{
  \ padding: [0, 1, 0, 1],
  \ border: [1, 1, 1, 1],
  \ filtermode: 'n',
  \ }
 let s:pkm_id = ''

 function! SamplePkm()
   if !pkm#Exists(s:pkm_id)
     let s:pkm = pkm#PopupKeyMenu()            " #1
     let s:pkm.max_cols_lines = 2              " #2
     let s:pkm.keys = 'rbyo'

     function! s:pkm.OnKeySelect(winid, index) " #3
       echo self.items[a:index]
     endfunction

     call s:pkm.Load(s:colors)                 " #4
   endif

   call s:pkm.Open(s:options)                  " #5
   let s:pkm_id = s:pkm.pkm_id
 endfunction
<
#1 The constructed pkm |dict| is managed by |pkm.pkm_id| key in
the script variable dict ({ pkm_id : pkm_dict }). |pkm#Exists()| checks if
the pkm_id is exists in the script variable dict, and you can reuse the
pkm dict.

#2 The |pkm-props| changes the pkm popup behavior. In this sample,
'[key] item' pairs will be displayed with 2 item columns, and '[key]'
will be the keys 'r', 'b', 'y', 'o'.

#3 The |pkm-handlers| can be used by overriding. The |pkm.OnKeySelect()| will be
called when the key is selected. In this case, the key 'r' returns 0, and the
key 'o' returns 3.

#4 The colors and the properties are loaded by the |pkm.Load()|. Now pkm
popup can be opend.

#5 The |pkm.Open()| calls |popup_create()| with the options argument. See
|popup_create-arguments| for details on the options.
>
 let s:colors = ['red', 'blue', 'yellow', 'orange',
      \ 'dark-red', 'dark-blue', 'dark-yellow', 'dark-orange',
      \ 'light-red', 'light-blue', 'light-yellow', 'light-orange']
<
If you load a List has items more than |pkm.key| length, items separated by
pages. On the default behavior, the key 'l' transits to next page, and the
key 'h' does the opposite of that. The page guide can be customized by
the |pkm.page_guides| property.

 +------------------------------------+
 | [r] red          [b] blue          |
 | [y] yellow       [o] orange        |
 |                (0) [L] >>          |
 +------------------------------------+

 +------------------------------------+
 | [r] dark-red     [b] dark-blue     |
 | [y] dark-yellow  [o] dark-orange   |
 |         << [H] (1) [L] >>          |
 +------------------------------------+

 +------------------------------------+
 | [r] light-red    [b] light-blue    |
 | [y] light-yellow [o] light-orange  |
 |         << [H] (2)                 |
 +------------------------------------+

==============================================================================
3. Install						*pkm-install*

With vim-plug:
>
 Plug 'yuxki/vim-pkm-api'
<
Combining your plugin:

Download and put the "autoload/pkm.vim" from

 https://github.com/yuxki/vim-pkm-api

into your plugin directory, and rename interface functions with a commad
like the following.
>
 sed -i -e 's|pkm#|foo#pkm#|g' path/to/your/plugin/autoload/foo/pkm.vim
<
==============================================================================
4. Interface						*pkm-interface*

------------------------------------------------------------------------------
API CONTENTS						*pkm-api-contents*

	|pkm-constructor|
	  |pkm#PopupKeyMenu()|
	|pkm-methods|
	  |pkm.Load()|
	  |pkm.Open()|
	  |pkm.Refresh()|
	  |pkm.Filter()|
	  |pkm.Remove()|
	|pkm-handlers|
	  |pkm.OnOpen()|
	  |pkm.OnFilter()|
	  |pkm.OnKeySelect()|
	  |pkm.OnClose()|
	|pkm-props|
	  |pkm.winid|
	  |pkm.pkm_id|
	  |pkm.items|
	  |pkm.pages|
	  |pkm.keys|
	  |pkm.max_cols_lines|
	  |pkm.vertical|
	  |pkm.align|
	  |pkm.item_border|
	  |pkm.col_width|
	  |pkm.key_guide|
	  |pkm.page_guides|
	  |pkm.add_page_guide|
	  |pkm.fix_cols|
	  |pkm.fix_lines|
	  |pkm.alt|
	  |pkm.xclose|
	  |pkm.ignorecase|
	  |pkm.next_page_key|
	  |pkm.prev_page_key|
	  |pkm.focus|
	|pkm-utils|
	  |pkm#GetPkmDicts()|
	  |pkm#GetNextId()|
	  |pkm#Clear()|
	  |pkm#Exists()|

------------------------------------------------------------------------------
CONSTRUCTOR						*pkm-constructor*

pkm#PopupKeyMenu()					*pkm#PopupKeyMenu()*

		Constuct and register the pkm dict into
		the unique "script variable dict" by the pkm_id key.
		This id is assigned from the unique "script variable number"
		that is incremented. >
			:call pkm#PopupKeyMenu()
			:echo pkm#GetPkmDicts()
			{'1000': {...}}

 			:call pkm#PopupKeyMenu()
			:echo pkm#GetPkmDicts()
			{'1000': {...}, '1001': {...}}
<

		Returns the constructed dict, which has |pkm.pkm_id|, it can
		be used to get or check existing the pkm dict. >
			:let pkm_id = ''
			:if !pkm#Exists(pkm_id)
			:  let pkm = pkm#PopupKeyMenu()
			:  let pkm_id = pkm.pkm_id
			:endif

------------------------------------------------------------------------------
METHODS							*pkm-methods*

pkm.Load({items})					*pkm.Load()*

		Load the {items} and some |pkm-props|. {items} is a
		string list, and a item is displayed with the mapped
		key. As a result, the |pkm.pages| is created. >
			:let id = pkm#PopupKeyMenu()
			:let pkm.max_cols_lines = 2
			:let pkm.keys ='abcd'
			:call pkm.Load(items)
			:echo pkm#PkmMenus()[id].pages
			[['[a] AAA [b] BBB ', '[c] CCC [d] DDD ']]
<
		If items or loaded props are changed, you need reload
		with calling this method again.
		Loaded props are following:
			pkm.keys
			pkm.max_cols_lines
			pkm.item_border
			pkm.add_page_guide
			pkm.align
			pkm.col_width
			pkm.fix_cols
			pkm.fix_lines
			pkm.vertical
			pkm.xclose
			pkm.key_guide
			pkm.page_guides
			pkm.next_page_key
			pkm.prev_page_key

		Returns the self dict, so can construct ~ open in a line. >
			:call pkm#PopupKeyMenu().Load(items).Open(options)
<
pkm.Open({options})					*pkm.Open()*

		Create and open a pkm popup. {options} argument is
		|popup_create()| options. The 'filter', the 'callback'
		and the 'mapping' options are reserved by this
		method. >
			call pkm.Open(#{
 				\ padding: [0, 1, 0, 1],
 				\ border: [1, 1, 1, 1],
 				\ })
<
				+----------+
				| [a] AAA  |
				| [b] BBB  |
				| [c] CCC  |
				| [d] DDD  |
				+----------+

		Calls |pkm.OnOpen()| handler after a popup opened. If the
		|pkm.pages| is empty or the |pkm.winid| is exists in existing
		popup |window-ID|, does not anything, and returns.

		Returns the self dict. And this dict is set window-ID by this
		method. >
			:let pkm = pkm.Open()
			:hi MyPkmColor ctermbg=darkgreen guibg=darkgreen
			:call setwinvar(pkm.winid, '&wincolor', 'MyPkmColor')

pkm.Refresh()						*pkm.Refresh()*

		Refresh texts of the pkm popupu window.
		It changes behavior depends on the state:
		  1. When the |pkm.pages| is not empty.
		     - Refresh by pkm.pages.

		  2. When the pkm.pages is empty, and the |pkm.alt| is not empty.
		     - Refresh by the pkm.alt.

		  3. When the pkm.pages is empty, and the pkm.alt is empty.
		     - Close the pkm popup.

		It can be used for popups that change items dynamically, like
		the following example: >
			func! s:pkm.OnKeySelect(winid, index) dict
			  if self.delete_mode
			    call remove(s:clips, a:index)
			    call s:pkm.Load(s:clips)
			    call s:pkm.Refresh()
			  endif
			  exec "normal! i" . s:clips[a:index]
			endfunc
<
		Returns the self dict.

pkm.Filter({winid}, {key})				*pkm.Filter()*

		The popup key menu's |popup-filter|.
		This method does the follwing actions in the order.

		1. Calls the |pkm.OnFilter()| handler.
		2. Closes the popup if the xclose is 1 and the key is 'x'
		3. Turns the page if the key is matched |pkm.next_page_key| or
		   |pkm.prev_page_key|.
		4. Calls the |pkm.OnKeySelect()| handler.if the key is matched
		   |pkm.keys|.

		Note: See |popup-filter| help for details on the popup-filter
		behaviors.

		Can be called directory:
			+-------------------+
			| [a] AAA [b] BBB   |
			|        (0) [L] >> |
			+-------------------+
>
			:call pkm.Filter(pkm.winid, 'L')
<
			+-------------------+
			| [a] CCC [b] DDD   |
			| << [H] (1)        |
			+-------------------+

		By default the filter returns TRUE and discards the key, and
		let Vim do not handle the key.

		To return FALSE and let Vim handle the key, set pkm.focus 0.
		It lets the filter return FALSE when the key is not matched
		the props, |pkm.next_page_key|, |pkm.next_page_key|, |pkm.keys|,
		'x'(when the |pkm.xclose| is 1). >
			:let pkm.focus = 0
<
		In an other way, return -1 in the |pkm.OnFilter()| handler
		and specify |filtermode| options for |popup_create()|.
		It lets the filter return FALSE immediately. The following
		example enables Vim to consume ":" and to enter Command-line
		mode, and disable the filter to filter the key except in
		Normal mode: >
			func! pkm.OnFilter(winid, key)
			  if a:key == ':'
			    return -1
			  endif
			  return 0
			endfunc
			call pkm.Open(#{filtermode: 'n'})


pkm.Remove()						*pkm.Remove()*

		Removes the self pkm dict from "script variable dict".

		This method does not close the popup. To not left the
		uncontrolable popup, call this method after closing: >
			func! pkm.OnClose(winid, key)
			  self.Remove()
			endfunc

------------------------------------------------------------------------------
HANDLERS						*pkm-handlers*

pkm.OnOpen({winid})					*pkm.OnOpen()*

		Called after opening the pkm popup in the |pkm.Open()|.
		Example: >
			func! pkm.OnOpen(winid)
			  hi MyPkmColor ctermbg=darkgreen guibg=darkgreen
			  call setwinvar(a:winid, '&wincolor', 'MyPkmColor')
			endfunc

pkm.OnFilter()						*pkm.OnFilter()*

		Called immediately after the |pkm.Filter()| invoked.
		Return value affects the |pkm.Filter()| behavior:

			 0 : Does not return immediately from the filter.
			     The return value is depend on |pkm.focus|.
			 1 : Returns immediately from the filter with TRUE.
			-1 : Returns immediately from the filter with FALSE.

		Examples:
			- To hide the popup: >
			func! pkm.OnFilter(winid, key)
			  if a:key ==# 'H'
			    call popup_hide(a:winid)
			    return 1
			  endif
			  return 0
			endfunc
<
			- To enter Command-line mode and Visual mode: >
			func! pkm.OnFilter(winid, key)
			  if index([':', 'v'], a:key) >= 0
			    return -1
			  endif
			endfunc

pkm.OnKeySelect({winid}, {index})			*pkm.OnKeySelect()*

		Called if the key is in the |pkm.keys| in |pkm.Filter()|. Returns
		from |pkm.Filter()| TRUE and the key is consumed by the filter.

		{index} is passed besed on length of items loaded by the
		|pkm.Load()|:
			+-------------------+  +-------------------+
			| [a] AAA [b] BBB   |  | [a] CCC [b] DDD   |
			|        (0) [L] >> |  | << [H] (1)        |
			+-------------------+  +-------------------+
			 key [a]: {index} 0	key [a]: {index} 2
			 key [b]: {index} 1	key [b]: {index} 3

		Example: >
			func! pkm.OnKeySelect(winid, index)
			  execute s:my_awesome_commands[a:index]
			  call popup_close(a:winid)
			endfunc

<
pkm.OnClose({winid}, {secondarg})				*pkm.OnClose()*

		Called after the pkm popup is closed. Actually, this handler
		is called by |popup-callback| and passed the same arguments,
		so that {secondarg} is the second argument of |popup_close()|.

		Example: >
			func! pkm.OnClose(winid, secondarg)
			  let self.winid = -1 " mark the closed popup dict
			endfunc

------------------------------------------------------------------------------
PROPS							*pkm-props*

pkm.winid						*pkm.winid*

		The |window-ID| assigned to the pkm popup.
		This id is set after |pkm.OnOpen()| created the popup. Before
		that, this id is -1.

		Following example defines the function hiding and the
		function showing the pkm popup with the pkm.winid: >
			func! HideMyPkm()
			  call popup_hide(pkm.winid)
			endfunc

			func! ShowMyPkm()
			  call popup_show(pkm.winid)
			endfunc
<
pkm.pkm_id						*pkm.pkm_id*

		The number links the pkm dict to the |popup-filter| and the
		|popup-callback| via the winid.
		See |pkm#PopupKeyMenu()| for the example of this prop usage.

pkm.items						*pkm.items*

		The list of the item that will be mapped to the keys.
		Example: >
			func! pkm.OnKeySelect(winid, index)
			  echo self.items[a:index]
			endfunc

pkm.pages						*pkm.pages*

		Line list displayed on the popup.
		See |pkm.Load()| for the example of value of this prop.

pkm.keys						*pkm.keys*

		Serial lowercase and uppercase letters, and numbers string
		that will be mapped to the items and matched the key in the
		|pkm.Filter()|.

		When value is "aB34" and items is ["AAA", "BBB", "CCC",
		"DDD"], the following popup is created.
		Example:
			[a] AAA
			[B] BBB
			[3] CCC
			[4] DDD

		If items that is loaded by |pkm.Load()| is more than
		pkm.keys, pkm.pages will be multile pages start the same
		keys.
		Example:
			[a] AAA  [a] EEE
			[B] BBB  [B] FFF
			[3] CCC
			[4] DDD
			-------  -------
			page: 0  page: 1

		Default: "abcdefimnopqrstuvwyz"

pkm.max_cols_lines					*pkm.max_cols_lines*

		Maximum number of a the the colmuns or the lines in the page.
		When the |pkm.vertical| is 0, this prop controls the number of
		colmuns. When pkm.vertical is 1, this prop controls the number
		of lines.
			- pkm.max_cols_lines is 3, pkm.vertical is FALSE:
			  [a] AAA [b] BBB [c] CCC
			  [d] DDD [e] EEE

			  3 colmuns and 2 lines

			- pkm.max_cols_lines is 3, pkm.vertical is TRUE:
			  [a] AAA [d] DDD
			  [b] BBB [e] EEE
			  [c] CCC

			  2 colmuns and 3 lines

		Default: 1

pkm.vertical						*pkm.vertical*

		When TRUE, items are alinged vertically.
		When FALSE, items are alinged horizontally (the default).

		See |pkm.max_cols_lines| for the example of aligning.

		Default: FALSE

pkm.align						*pkm.align*

		When TRUE (the default):
		 - The following props will be enabled:
		   - pkm.col_width (default "auto")
		   - pkm.fix_cols (default FALSE)
		   - pkm.fix_lines (default FALSE)

		   Only the pkm.col_width will be always on, it can be
		   chosen how to adjust the colmun width.
		   Examples:
			- When the pkm.col_width is "auto":
			  page 1: [a] This [b] is the pkm.align [c] example
			  page 0: [a] c1   [b] c2               [c] c3

			- When the pkm.align is FALSE:
			  page 1: [a] This [b] is the pkm.align [c] example
			  page 0: [a] c1 [b] c2 [c] c3

		 - The page guide will be aligned center.
		   Example:
			[a] This [b] is the pkm.align [c] example
			            << [H] (2) [L] >>

			When FALSE:
			[a] This [b] is the pkm.align [c] example
			<< [H] (2) [L] >>

		Default: TRUE

pkm.item_border						*pkm.item_border*

		String separates between columns.

		Examples:
			- pkm.item_border is " | " and 5 items, 3 colmns:
			[a] AAA | [b] BBB | [c] CCC
			[d] DDD | [e] EEE

		Default: " "

pkm.col_width						*pkm.col_width*

		How to adjust width of the colmun. Can use "auto" or "max",
		number, number list:
		 - When "auto",
		   each width of the colum will be adjusted to longest item
		   of the self colmun for the all pages:
		 	page 1: [a] This is [b] a  [c] example
		 	page 0: [a] c1	    [b] c2 [c] c3

		 - When "max",
		   width of the colum will be adjusted to longest width
		   of all items:
		 	page 1: [a] This is [b] a       [c] example
		 	page 0: [a] c1	    [b] c2      [c] c3

		 - When number,
		   width of the colum will be adjusted to this number.
		 	- A case of 8:
		 	  [a] A    [b] B    [c] C
		 	  -------- -------- --------
		 	         8        8        8

		   When there is a item which width is more than this number,
		   only the column that items is positioned works like "auto".
		 	- A case of 8:
		 	  page 0: [a] A    [b] B       [c] C
		 	          -------- ----------- --------
		 	                 8          11        8
		 	  page 1: [a] D    [b] EEEEEEE [c] F
		 	          -------- ----------- --------
		 	                 8          11        8

		 - When number list,
		   width of the colum will be adjusted to this number list.
		 	- A case of [4, 8, 16]:
		 	  [a] A [b] B    [c] C
		 	  ----- -------- ----------------
		 	      4        8               16

		   The other behavior is same as "number".

		To enable this prop, |pkm.align| needs to be TRUE.

		Default: "auto"

pkm.key_guide						*pkm.key_guide*

		A template of the guide that will be displayed on the pkm
		popup window.

		"%k" is replaced by the [k]ey.
		"%t" is replaced by the i[t]em.

		Default: "[%k] %t"

pkm.page_guides						*pkm.page_guides*

		Templates of the page guide that are displayed bottom
		of the pkm popup.

		Needs 3 template:
		 - Index 0: For the first page
		 - Index 1: For the middle pages
		 - Index 2: For the last page

		"%p" is replaced by the [p]age number.
		"%n" is replaced by the pkm.[n]ext_page_key.
		"%v" is replaced by the pkm.pre[v]_page_key.

		Default: [
		\ "       (%p) [%n] >>",
		\ "<< [%v] (%p) [%n] >>",
		\ "<< [%v] (%p)       ",
		\ ]

pkm.add_page_guide					*pkm.add_page_guide*

		When TRUE and multiple pages, the page guide will be
		added into |pkm.pages| in |pkm.Load()|.

		Default: TRUE

pkm.fix_cols						*pkm.fix_cols*

		TRUE to fix the number of item columns in the all pages.
		Example:
			page 0: [a] A [b] B [c] C
			        ----- ----- -----
			page 1: [a] D
			        ----- ----- -----

		Default: FALSE

pkm.fix_lines						*pkm.fix_lines*

		TRUE to fix the number of lines in the all pages.
		Example:
			page 0: [a] A [b] B
				[c] C [d] D
				[e] E [f] F
				----- -----

			page 1: [a] G


				-----

		Default: FALSE

pkm.alt							*pkm.alt*

		Alternate texts for the |pkm.pages|. Passed as the {what}
		of the |popup_create()| arguments, if the pkm.pages is empty
		and length of this prop is over 1.

		Default: ""

pkm.xclose						*pkm.xclose*

		TRUE to map the key 'x' to the key that closes the pkm
		popup. After the popup is closed, the |pkm.Filter()|
		return with TRUE.

		Default: TRUE

pkm.ignorecase						*pkm.ignorecase*

		TRUE to ignore case of the |pkm.keys|.
		Examples:
			- When TRUE
			  item : [a] A [b] B [c] C
			         ----- ----- -----
			  key  : aA    bB    cC

			- When FALSE
			  item : [a] A [b] B [c] C
			         ----- ----- -----
			  key  : a     b     c

		Default: FALSE

pkm.next_page_key					*pkm.next_page_key*

		A letter that will be mapped to the key that moves to the
		next page. After the next page is displayed, the |pkm.Filter()|
		returns with TRUE.

		Default: "L"

pkm.prev_page_key					*pkm.prev_page_key*

		A letter that will be mapped to the key that moves to the
		previous page. After the previous page is displayed, the
		|pkm.Filter()| returns with TRUE.

		Default: "H"

pkm.focus						*pkm.focus*

		When FALSE, |pkm.Filter()| will return FALSE when the key is
		not matched the props, |pkm.next_page_key|, |pkm.next_page_key|,
		|pkm.keys|, 'x'(when the |pkm.xclose| is 1).
		When TRUE, the method will return TRUE, even if the key is not
		matched the props.

		Note: See |popup-filter| help for details on how return value
		affects behavior.

		Default: TRUE

------------------------------------------------------------------------------
UTILS							*pkm-utils*

pkm#GetPkmDicts()					*pkm#GetPkmDicts()*

		Gets the pkm dicts from the script variable.

pkm#GetNextId()						*pkm#GetNextId()*

		Gets the number that will be assinged the next pkm dict from
		the script variable.

pkm#Clear()						*pkm#Clear()*

		Closes the all pkm popups, and initializes the dict of the
		script variables.

pkm#Exists({pkmid})					*pkm#Exists()*

		Returns 1 if {pkmid} (|pkm.pkm_id|) is exists in the script
		variable, if not returns 0.

==============================================================================
SAMPLES							*pkm-samples*
>
 func! s:KeywordPosList(line)
   let start = 0
   let pos_list = []

   while 1
     let pos = matchstrpos(a:line, '\k\+', start)
     if pos[2] < 0
       break
     endif
     call add(pos_list, pos)
     let start = pos[2]
   endwhile
   return pos_list
 endfunc

 hi QuickWord term=reverse ctermbg=16 guibg=#000000
 let s:pkm_id = ''
 func! s:QuickWord()
   if !pkm#Exists(s:pkm_id)
     let s:pkm = pkm#PopupKeyMenu()
     let s:pkm.max_cols_lines = len(s:pkm.keys)
     let s:pkm.key_guide = "[%k]"
     let s:pkm.ignorecase = 1

     func! s:pkm.OnOpen(winid)
       call setwinvar(a:winid, '&wincolor', 'QuickWord')
     endfunc

     func! s:pkm.OnFilter(winid, key) dict
       if a:key == ':'
         return -1
       endif

       if len(a:key) == 1
         if a:key =~# '\u'
           let self.endofword = 1
         else
           let self.endofword = 0
         endif
       endif
     endfunc

     func! s:pkm.OnKeySelect(winid, index) dict
       let pos = self.endofword == 0 ?
             \ self.pos_list[a:index][1] + 1 : self.pos_list[a:index][2]
       call cursor('.', pos)
       call popup_close(a:winid)
     endfunc
   endif

   let pos_list = s:KeywordPosList(getline('.'))
   let keywords = []
   for pos in pos_list
     call add(keywords, pos[0])
   endfor
   let s:pkm.pos_list = pos_list

   let options = #{
         \ filtermode: 'n',
         \ pos: 'botleft',
         \ line: 'cursor+1',
         \ col: 'cursor-'.getpos('.')[2],
         \ }
   call s:pkm.Load(keywords).Open(options)
   let s:pkm_id = s:pkm.pkm_id
 endfunc

 nmap <silent> W :call <SID>QuickWord()<CR>
<
==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
